%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - cql
scope: source.cql

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: keywords
    - include: capital-types
    - include: types
    - include: capital-keys
    - include: keys
    - include: captial-operations
    - include: keywords-2
    - include: numbers
    - include: operators
    - include: strings

  keywords:
    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(CREATE|INDEX|KEYSPACE|USER|TABLE|WITH|REPLICATION|UNIQUE|INDEX|LANGUAGE|OPERATOR CLASS|OPERATOR|RULE|SCHEMA|SEQUENCE|TABLE|TABLESPACE|TRIGGER|TYPE|USER|VIEW|WITH|REPLICATION|IF|NOT|EXISTS|DROP|ALTER|DESCRIBE|USE|VALUES|VALUE|CONCATENATE|CONVERT|LOWER|SUBSTRING|TRANSLATE|TRIM|UPPER|IN|SHOW)\b'
      scope: keyword.control.cql

  capital-types:
    - match: '\b(ASCII|BIGINT|BLOB|BOOLEAN|COUNTER|DATE|DECIMAL|DOUBLE|PRECISION|FLOAT|INET|SMALLINT|TEXT|TIME|TIMESTAMP|TIMEUUID|TINYINT|UUID|VARINT|INT|INTERVAL|VARCHAR|AVG|COUNT|MIN|MAX|SUM)\b'
      scope: variable.function.cql

  types:
    - match: '\b(ascii|bigint|blob|boolean|counter|date|decimal|double|precision|float|inet|smallint|text|time|timestamp|timeuuid|tinyint|uuid|varint|int|interval|varchar|avg|count|min|max|sum)\b'
      scope : variable.function.cql

  capital-keys:
    - match: '\b((?:PRIMARY|FOREIGN)\s+KEY|REFERENCES|ON\sDELETE(\s+CASCADE)?|CHECK|CONSTRAINT)\b'
      scope: keyword.control.cql

  keys:
    - match: '\b((?:primary|foreign)\s+key|references|on\sdelete(\s+cascade)?|check|constraint)\b'
      scope: keyword.context.cql

  captial-operations:
    - match: '\b(SELECT(\s+DISTINCT)?|INSERT\s+(IGNORE\s+)?INTO|UPDATE|DELETE|TRUNCATE|FROM|SET|WHERE|GROUP\sBY|OR|LIKE|AND|INTO\s(OUTFILE|DUMPFILE)?|LOAD\sLOCAL|INFILE|FIELDS|LINES|UNION(\s+ALL)?|HAVING|(ORDER|TERMINATED|ENCLOSED)\sBY|LIMIT|(INNER|CROSS)\s+JOIN|STRAIGHT_JOIN|(LEFT|RIGHT)(\s+OUTER)?\s+JOIN|NATURAL(\s+(LEFT|RIGHT)(\s+OUTER)?)?\s+JOIN)\b'
      scope: keyword.context.cql

  keywords-2:
    - match: '\b(TABLE|COLUMN|AGGREGATE|CONSTRAINT|DATABASE|DOMAIN|FUNCTION|INDEX|OPERATOR|RULE|SCHEMA|SEQUENCE|TRIGGER|TYPE|VIEW|AS|ASC|DESC)\b'
      scope: keyword.context.cql

  numbers:
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.cql

  operators:
    - match: '[*+/\-=%|&<>!]'
      scope: keyword.operator.cql

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character.
    - match: "'"
      scope: punctuation.definition.string.begin.cql
      push: inside_string

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.cql
    - match: '\.'
      scope: constant.character.escape.cql
    - match: "'"
      scope: punctuation.definition.string.end.cql
      pop: true

  comments:
    # Comments begin with a '--' and finish at the end of the line.
    - match: '--'
      scope: punctuation.definition.comment.cql
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.cql
        - match: $\n?
          pop: true
